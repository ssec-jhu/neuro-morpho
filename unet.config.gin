import gin.torch

import neuro_morpho.model.unet
import neuro_morpho.reports.generator
import neuro_morpho.reports.stats
import neuro_morpho.logging.comet
import neuro_morpho.cli
import neuro_morpho.model.loss
import neuro_morpho.data.data_loader

torch.optim.Adam.lr = 0.001

pos/class_accuracy.class_idx = 1
pos/class_accuracy.threshold = 0.5
neg/class_accuracy.class_idx = 0
neg/class_accuracy.threshold = 0.5

CometLogger.workspace = "ssec-dendrite-segmentation"
CometLogger.project_name = "unet-classification"
CometLogger.disabled = True

WeightedFocalLoss.alpha = 0.25
WeightedFocalLoss.gamma = 2.0
DiceLoss.smooth = 1

train/build_dataloader.x_dir = "data/processed/train/imgs"
train/build_dataloader.y_dir = "data/processed/train/lbls"
train/build_dataloader.batch_size = 16
train/build_dataloader.num_workers = 4
train/build_dataloader.shuffle = True
train/build_dataloader.aug_transform = ...
train/build_dataloader.x_norm = ...
train/build_dataloader.y_norm = ...

test/build_dataloader.x_dir = "data/processed/test/imgs"
test/build_dataloader.y_dir = "data/processed/test/lbls"
test/build_dataloader.batch_size = 16
test/build_dataloader.num_workers = 4
test/build_dataloader.shuffle = True
test/build_dataloader.aug_transform = ...
test/build_dataloader.x_norm = ...
test/build_dataloader.y_norm = ...



CombinedLoss.weights = (
    1.0,  # weight for dice
    0.5,  # weight for focal loss
)
CombinedLoss.losses = (
    @DiceLoss,          # First loss function (Dice)
    @WeightedFocalLoss, # Second loss function (Focal Loss)
)

UNet.n_input_channels = 1
UNet.n_output_channels = 1
UNet.encoder_channels = [64, 128, 256, 512, 1024]
UNet.decoder_channels = [512, 256, 128, 64]
UNet.device = "cuda"

UNet.fit.train_data_loader = ...
UNet.fit.test_data_loader = ...
UNet.fit.epochs = 10
UNet.fit.optimizer = @torch.optim.Adam
UNet.fit.loss_fn = @CombinedLoss  # Use the combined loss function
UNet.fit.metric_fns = [
    @pos/class_accuracy,
    @neg/class_accuracy,
]
UNet.fit.logger = @CometLogger  # Use CometLogger for logging metrics
UNet.fit.log_every = 10



generate_report.reports = [
    @noboxplot_summary,
]

calculate_n_branches.include_isolated_branches = False
calculate_n_branches.include_isolated_cycles = False
calculate_n_tip_points.include_isolated_branches = False
calculate_total_length.dist_type = "euclidean"

skeleton_analysis.pixel_size = 1
skeleton_analysis.assume_single_skeleton = True
skeleton_analysis.stat_fns = [
    ("Number of Branches", @calculate_n_branches),
    ("Number of Tips", @calculate_n_tip_points),
    ("Total Length", @calculate_total_length),
]



run.model = @UNet()
run.training_x_dir = "data/processed/train/imgs"
run.training_y_dir = "data/processed/train/lbls"
run.testing_x_dir = "data/processed/test/imgs"
run.testing_y_dir = "data/processed/test/lbls"
run.model_save_dir = "models"
run.model_out_y_dir = "data/output"
run.model_stats_output_dir = "data/stats/model"
run.labled_stats_outpur_dir = "data/stats/label"
run.report_output_dir = "data/report"