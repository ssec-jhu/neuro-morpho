%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function: Write_SWCFromMAT
% Author: Sabyasachi Sutradhar
% Date: 
% 
% Description:
% This function generates an SWC file from a neuron structure obtained 
% through QNMorph-VX.X. The SWC file format is commonly used for representing neuronal morphology.
% 
% Inputs:
% - Object: A MATLAB structure containing the neuron data, including 
%   branch hierarchy and skeletal points.
% - outfile: A string specifying the name of the output SWC file.
% 
% Outputs:
% - A .swc file written to the specified location, containing:
%   - Node ID
%   - Branch ID
%   - X, Y, and Z coordinates (in microns)
%   - Radius
%   - Parent node ID
% 
% Example Usage:
%   Write_SWCFromMAT(neuronData, 'output.swc');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Write_SWCFromMAT(Object,outfile)
global visit;
%%%% store the pixel value
if isfield(Object.Neuron,'pixelsize')
    pix=Object.Neuron.pixelsize;
    pixchar='microns';
else
    pix=1;
    pixchar='pixels';
end
for i=1:length(Object.Branch.Subtree)


end



filename=outfile;
fp = fopen(filename,'w');
fprintf(fp,"#Skeleton generated by simulation\n");
fprintf(fp,"#Info=All lengths are in %s\n",pixchar);
fprintf(fp,"#COLUMN_NAMES = ID, BranchID, x, y, z,radius,ParentID\n");
fprintf(fp,"%d %d %.3f %.3f %.3f %.3f %d\n",1,1,0.0,0.0,0.0,0.0,-1);


NTotalPoints=1;

for ii=1:length(Object.Branch.Subtree)
    visit=zeros(length(Object.Branch.Subtree(ii).skel),1);
    subtree=Object.Branch.Subtree(ii);
    id=Object.Branch.Subtree(ii).Level{1}.id;
    ParentPointId(id)=1;
    DFS_Search(fp,subtree,id,NTotalPoints,ParentPointId,pix);  
end
fclose(fp);
end



function DFS_Search(fid,subtree,i,NTotalPoints,ParentPointId,pix)
global visit;
visit(i)=1;
for j=1:length(subtree.skel(i).xy)%ignore the first point,same as the last point of prev branch
NTotalPoints=NTotalPoints+1;
if j==1
fprintf(fid,"%d %d %1.3f %1.3f %1.3f %1.3f %d\n",NTotalPoints,i,subtree.skel(i).xy(j,1)*pix,subtree.skel(i).xy(j,2)*pix,0.0,subtree.skel(i).Diam*pix/2.0,ParentPointId(i));
else
fprintf(fid,"%d %d %1.3f %1.3f %1.3f %1.3f %d\n",NTotalPoints,i,subtree.skel(i).xy(j,1)*pix,subtree.skel(i).xy(j,2)*pix,0.0,subtree.skel(i).Diam*pix/2.0,NTotalPoints-1);
end
end

%if ith branch has children
if subtree.skel(i).type~=1 
    if length(subtree.skel(i).offspring_id)>=2
        for kk=1:length(subtree.skel(i).offspring_id)
                offid=subtree.skel(i).offspring_id(kk);
                if visit(offid)==0
                ParentPointId(offid)=NTotalPoints;
                DFS_Search(fid,subtree,offid,NTotalPoints,ParentPointId,pix);
                end
        end
    elseif length(subtree.skel(i).offspring_id)==1
         offid=subtree.skel(i).offspring_id;
         if visit(offid)==0
         ParentPointId(offid)=NTotalPoints;
         DFS_Search(fid,subtree,offid,NTotalPoints,ParentPointId,pix);
         end
    end

end
end
